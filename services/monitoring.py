import asyncio
from typing import List, Tuple
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from utils.database import Database
from services.lolz_api import LolzAPI
from services.deal_analyzer import DealAnalyzer
from utils.models import UserSettings, DealAlert, GAME_VERSION_NAMES, REGION_NAMES, ORIGIN_NAMES, CATEGORIES


class MonitoringService:
    def __init__(self, bot: Bot, db: Database, api: LolzAPI, interval: int = 5):
        self.bot = bot
        self.db = db
        self.api = api
        self.analyzer = DealAnalyzer()
        self.scheduler = AsyncIOScheduler()
        self.interval = interval
        self.running = False
    
    async def start(self):
        if self.running:
            return
        
        self.scheduler.add_job(self.check_deals, 'interval', minutes=self.interval, id='checker')
        self.scheduler.add_job(self.cleanup, 'interval', hours=24, id='cleanup')
        self.scheduler.start()
        self.running = True
        print(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω ({self.interval} –º–∏–Ω)")
    
    async def stop(self):
        if not self.running:
            return
        self.scheduler.shutdown()
        self.running = False
        print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def check_deals(self):
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
        try:
            users = await self.db.get_all_users()
            for user_id in users:
                settings = await self.db.get_user_settings(user_id)
                if settings and settings.notifications_enabled:
                    await self.check_user_deals(user_id, settings)
                    await asyncio.sleep(1)
            print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    async def check_user_deals(self, user_id: int, settings: UserSettings):
        try:
            accounts = await self.api.get_all_accounts(settings)
            if not accounts:
                return
            
            deals = self.analyzer.analyze_deals(accounts, settings)
            for deal in deals[:5]:
                if not await self.db.is_item_seen(user_id, deal.account.item_id):
                    await self.send_notification(user_id, deal, settings)
                    await self.db.mark_item_seen(user_id, deal.account.item_id)
                    await asyncio.sleep(0.5)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def send_notification(self, user_id: int, deal: DealAlert, settings: UserSettings):
        try:
            msg, kb = self._format_msg(deal, settings)
            await self.bot.send_message(
                chat_id=user_id, text=msg, parse_mode="HTML",
                reply_markup=kb, disable_web_page_preview=True
            )
            await self.db.save_notification(user_id, deal.account.item_id, msg)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")
    
    def _format_msg(self, deal: DealAlert, settings: UserSettings) -> Tuple[str, InlineKeyboardMarkup]:
        acc = deal.account
        
        version = GAME_VERSION_NAMES.get(acc.game_version, acc.game_version)
        region = REGION_NAMES.get(acc.region, acc.region)
        origin = ORIGIN_NAMES.get(acc.origin, acc.origin)
        cat_name = self._get_cat_name(acc, settings)
        
        msg = f"üéØ <b>–í—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>\n\n<b>{cat_name}</b>\n<b>–¶–µ–Ω–∞:</b> {acc.price:,} ‚ÇΩ"
        
        details = []
        if acc.game_version:
            details.append(f"–ò–∑–¥–∞–Ω–∏–µ: {version}")
        if acc.level > 0:
            details.append(f"–£—Ä–æ–≤–µ–Ω—å: {acc.level}")
        if acc.region:
            details.append(f"–†–µ–≥–∏–æ–Ω: {region}")
        
        details.append(f"–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {origin}")
        
        if acc.rubles > 0:
            details.append(f"–í –∏–≥—Ä–µ: {acc.rubles:,} ‚ÇΩ")
        if acc.dollars > 0 or acc.euros > 0:
            details.append(f"–í–∞–ª—é—Ç–∞: ${acc.dollars}, ‚Ç¨{acc.euros}")
        if acc.nsb:
            details.append("–ù–µ –ø—Ä–æ–¥–∞–≤–∞–ª—Å—è —Ä–∞–Ω–µ–µ")
        if acc.pve_access:
            details.append("–î–æ—Å—Ç—É–ø –∫ PVE")
        if acc.allow_ask_discount and acc.max_discount_percent > 0:
            details.append(f"–°–∫–∏–¥–∫–∞ –¥–æ {acc.max_discount_percent}%")
        
        if details:
            msg += f"\n\n{' ‚Ä¢ '.join(details[:4])}"
            if len(details) > 4:
                msg += f"\n{' ‚Ä¢ '.join(details[4:])}"
        
        msg += f"\n\n<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> {acc.seller_username} ({acc.seller_sold_items:,} –ø—Ä–æ–¥–∞–∂"
        if acc.seller_restore_percent is not None:
            msg += f", {acc.seller_restore_percent}% –≤–æ–∑–≤—Ä–∞—Ç–æ–≤"
        msg += ")"
        
        msg += f"\n<b>–û—Ü–µ–Ω–∫–∞:</b> {deal.score:.1f}/100"
        msg += f"\n<b>–ü—Ä–∏—á–∏–Ω—ã:</b> {deal.reason}"
        
        if deal.discount_potential > 0:
            msg += f"\n<b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–∫–∏–¥–∫–∏:</b> {deal.discount_potential}%"
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é", url=acc.url)]
        ])
        
        return msg, kb
    
    def _get_cat_name(self, acc, settings: UserSettings) -> str:
        if acc.game_version:
            return CATEGORIES["escape_from_tarkov"]["name"]
        for cat in settings.categories:
            if cat in CATEGORIES:
                return CATEGORIES[cat]["name"]
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    
    async def cleanup(self):
        try:
            await self.db.cleanup_old_seen_items(7)
            print("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    async def send_test_notification(self, user_id: int):
        settings = await self.db.get_user_settings(user_id)
        if not settings:
            return False
        
        try:
            accounts = await self.api.get_all_accounts(settings)
            if accounts:
                deals = self.analyzer.analyze_deals(accounts[:10], settings)
                if deals:
                    await self.send_notification(user_id, deals[0], settings)
                    return True
            
            await self.bot.send_message(user_id, "–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            return False
