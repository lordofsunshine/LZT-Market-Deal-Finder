from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import List

from utils.database import Database
from utils.models import UserSettings, CATEGORIES, GAME_VERSION_NAMES, REGION_NAMES, ORIGIN_NAMES
from utils.keyboards import *


class States(StatesGroup):
    selecting_cats = State()
    editing_cats = State()
    settings_menu = State()
    price_min = State()
    price_max = State()
    level_min = State()
    level_max = State()
    discount_threshold = State()


router = Router()


@router.message(Command("start"))
async def start(message: Message, state: FSMContext, db: Database):
    user_id = message.from_user.id
    existing = await db.get_user_settings(user_id)
    
    text = """ü§ñ <b>Lolz Market Deal Finder</b>\n\n–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Lolz Market. –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Ö –≤—ã–≥–æ–¥–Ω–æ—Å—Ç—å –ø–æ —Ü–µ–Ω–µ, —É—Ä–æ–≤–Ω—é, —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∫–∏–¥–∫–∏, –∏ —É–≤–µ–¥–æ–º–ª—è—é —Ç–æ–ª—å–∫–æ –æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö —Å —É—á—ë—Ç–æ–º –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n\n–ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É, —á—Ç–æ–±—ã –≤—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ª—É—á—à–∏–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–µ."""
    
    if existing:
        await message.answer(text + "\n\n–£ –≤–∞—Å –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=get_main_kb(), parse_mode="HTML")
    else:
        await message.answer(text + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=get_cats_kb(), parse_mode="HTML")
        await state.set_state(States.selecting_cats)


@router.callback_query(F.data.startswith("category_"))
async def handle_cat(callback: CallbackQuery, state: FSMContext):
    cat = callback.data.split("_", 1)[1]
    data = await state.get_data()
    selected = data.get("selected_cats", [])
    
    if cat in selected:
        selected.remove(cat)
    else:
        selected.append(cat)
    
    await state.update_data(selected_cats=selected)
    await callback.message.edit_reply_markup(reply_markup=get_cats_kb(selected))
    await callback.answer()


@router.callback_query(F.data == "categories_next")
async def cats_next(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("selected_cats", [])
    
    if not selected:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ:",
        reply_markup=get_settings_kb(), parse_mode="HTML"
    )
    await state.set_state(States.settings_menu)
    await callback.answer()


@router.callback_query(F.data == "edit_categories")
async def edit_cats(callback: CallbackQuery, state: FSMContext, db: Database):
    settings = await db.get_user_settings(callback.from_user.id)
    if not settings:
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", show_alert=True)
        return
    
    await state.update_data(selected_cats=settings.categories.copy())
    await callback.message.edit_text(
        "üìÇ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_edit_cats_kb(settings.categories), parse_mode="HTML"
    )
    await state.set_state(States.editing_cats)
    await callback.answer()


@router.callback_query(F.data.startswith("edit_category_"))
async def edit_cat(callback: CallbackQuery, state: FSMContext):
    cat = callback.data.split("_", 2)[2]
    data = await state.get_data()
    selected = data.get("selected_cats", [])
    
    if cat in selected:
        selected.remove(cat)
    else:
        selected.append(cat)
    
    await state.update_data(selected_cats=selected)
    await callback.message.edit_reply_markup(reply_markup=get_edit_cats_kb(selected))
    await callback.answer()


@router.callback_query(F.data == "save_categories")
async def save_cats(callback: CallbackQuery, state: FSMContext, db: Database):
    data = await state.get_data()
    selected = data.get("selected_cats", [])
    
    if not selected:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é!", show_alert=True)
        return
    
    settings = await db.get_user_settings(callback.from_user.id)
    if settings:
        settings.categories = selected
        await db.save_user_settings(callback.from_user.id, settings)
        
        names = [CATEGORIES[cat]["name"] for cat in selected if cat in CATEGORIES]
        await callback.message.edit_text(
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n<b>–ê–∫—Ç–∏–≤–Ω—ã–µ:</b>\n{', '.join(names)}",
            reply_markup=get_main_kb(), parse_mode="HTML"
        )
        await state.clear()
        await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_main(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_kb(), parse_mode="HTML"
    )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "settings_price")
async def set_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üí∞ <b>–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b>\n\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        parse_mode="HTML"
    )
    await state.set_state(States.price_min)
    await callback.answer()


@router.message(States.price_min)
async def price_min_input(message: Message, state: FSMContext):
    try:
        min_price = None if message.text == "-" else int(message.text)
        await state.update_data(min_price=min_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await state.set_state(States.price_max)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '-'")


@router.message(States.price_max)
async def price_max_input(message: Message, state: FSMContext):
    try:
        max_price = None if message.text == "-" else int(message.text)
        await state.update_data(max_price=max_price)
        
        data = await state.get_data()
        text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        if data.get("min_price"):
            text += f"–ú–∏–Ω: {data['min_price']:,} ‚ÇΩ\n"
        if max_price:
            text += f"–ú–∞–∫—Å: {max_price:,} ‚ÇΩ\n"
        
        await message.answer(text + "\n–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:", reply_markup=get_settings_kb())
        await state.set_state(States.settings_menu)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '-'")


@router.callback_query(F.data == "settings_versions")
async def set_versions(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("game_versions", [])
    await callback.message.edit_text(
        "üéÆ <b>–ò–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–¥–∞–Ω–∏—è Escape from Tarkov:",
        reply_markup=get_versions_kb(selected), parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("version_"))
async def handle_version(callback: CallbackQuery, state: FSMContext):
    version = callback.data.split("_", 1)[1]
    data = await state.get_data()
    selected = data.get("game_versions", [])
    
    if version in selected:
        selected.remove(version)
    else:
        selected.append(version)
    
    await state.update_data(game_versions=selected)
    await callback.message.edit_reply_markup(reply_markup=get_versions_kb(selected))
    await callback.answer()


@router.callback_query(F.data == "settings_regions")
async def set_regions(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("regions", [])
    await callback.message.edit_text(
        "üåç <b>–†–µ–≥–∏–æ–Ω—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω—ã:",
        reply_markup=get_regions_kb(selected), parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("region_"))
async def handle_region(callback: CallbackQuery, state: FSMContext):
    region = callback.data.split("_", 1)[1]
    data = await state.get_data()
    selected = data.get("regions", [])
    
    if region in selected:
        selected.remove(region)
    else:
        selected.append(region)
    
    await state.update_data(regions=selected)
    await callback.message.edit_reply_markup(reply_markup=get_regions_kb(selected))
    await callback.answer()


@router.callback_query(F.data == "settings_complete")
async def complete_settings(callback: CallbackQuery, state: FSMContext, db: Database):
    data = await state.get_data()
    
    settings = UserSettings(
        user_id=callback.from_user.id,
        categories=data.get("selected_cats", ["escape_from_tarkov"]),
        min_price=data.get("min_price"),
        max_price=data.get("max_price"),
        game_versions=data.get("game_versions", []),
        regions=data.get("regions", []),
        origins=data.get("origins", []),
        min_level=data.get("min_level"),
        max_level=data.get("max_level"),
        order_by=data.get("order_by", "price_to_up"),
        show=data.get("show", "active"),
        nsb=data.get("nsb"),
        sb=data.get("sb"),
        email_login_data=data.get("email_login_data"),
        pve_access=data.get("pve_access"),
        max_discount_threshold=data.get("max_discount_threshold", 20)
    )
    
    await db.save_user_settings(callback.from_user.id, settings)
    await callback.message.edit_text(
        "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n–ë–æ—Ç –Ω–∞—á–Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
        reply_markup=get_main_kb(), parse_mode="HTML"
    )
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "back_to_settings")
async def back_settings(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:",
        reply_markup=get_settings_kb(), parse_mode="HTML"
    )
    await state.set_state(States.settings_menu)
    await callback.answer()


@router.callback_query(F.data == "open_settings")
async def open_settings(callback: CallbackQuery, state: FSMContext, db: Database):
    settings = await db.get_user_settings(callback.from_user.id)
    if settings:
        await state.update_data(
            selected_cats=settings.categories,
            min_price=settings.min_price,
            max_price=settings.max_price,
            game_versions=settings.game_versions or [],
            regions=settings.regions or [],
            origins=settings.origins or [],
            min_level=settings.min_level,
            max_level=settings.max_level,
            order_by=settings.order_by,
            show=settings.show,
            nsb=settings.nsb,
            sb=settings.sb,
            email_login_data=settings.email_login_data,
            pve_access=settings.pve_access,
            max_discount_threshold=settings.max_discount_threshold
        )
    
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=get_settings_kb(), parse_mode="HTML"
    )
    await state.set_state(States.settings_menu)
    await callback.answer()


@router.callback_query(F.data == "view_settings")
async def view_settings(callback: CallbackQuery, db: Database):
    settings = await db.get_user_settings(callback.from_user.id)
    if not settings:
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", show_alert=True)
        return
    
    text = "üìä <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
    
    if settings.categories:
        names = [CATEGORIES[cat]["name"] for cat in settings.categories if cat in CATEGORIES]
        text += f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {', '.join(names)}\n\n"
    
    if settings.min_price or settings.max_price:
        price_range = []
        if settings.min_price:
            price_range.append(f"–æ—Ç {settings.min_price:,} ‚ÇΩ")
        if settings.max_price:
            price_range.append(f"–¥–æ {settings.max_price:,} ‚ÇΩ")
        text += f"<b>–¶–µ–Ω–∞:</b> {' '.join(price_range)}\n\n"
    
    if settings.game_versions:
        versions = [GAME_VERSION_NAMES.get(v, v) for v in settings.game_versions]
        text += f"<b>–ò–∑–¥–∞–Ω–∏—è:</b> {', '.join(versions)}\n\n"
    
    text += f"<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–≤–∫–ª—é—á–µ–Ω—ã' if settings.notifications_enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}\n"
    text += f"<b>–ú–∏–Ω. —Å–∫–∏–¥–∫–∞:</b> {settings.max_discount_threshold}%"
    
    await callback.message.edit_text(text, reply_markup=get_main_kb(), parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "toggle_notifications")
async def toggle_notif(callback: CallbackQuery, db: Database):
    settings = await db.get_user_settings(callback.from_user.id)
    if not settings:
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    settings.notifications_enabled = not settings.notifications_enabled
    await db.save_user_settings(callback.from_user.id, settings)
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if settings.notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
    
    try:
        await callback.message.edit_reply_markup(reply_markup=get_main_kb())
    except:
        pass


@router.callback_query(F.data == "view_stats")
async def view_stats(callback: CallbackQuery, db: Database):
    try:
        total = len(await db.get_all_users())
        text = f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total}\n<b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–æ"
        
        await callback.message.edit_text(text, reply_markup=get_main_kb(), parse_mode="HTML")
        await callback.answer()
    except Exception:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.message(Command("test"))
async def test_cmd(message: Message, monitoring):
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç...")
    success = await monitoring.send_test_notification(message.from_user.id)
    
    if success:
        await message.answer("–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        await message.answer("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

@router.callback_query(F.data == "settings_email")
async def set_email(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    email = data.get("email_login_data")
    await callback.message.edit_text(
        "üìß <b>–ü–æ—á—Ç–∞</b>\n\n–¢—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ—á—Ç–µ?",
        reply_markup=get_email_kb(email), parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "toggle_email")
async def toggle_email(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    email = data.get("email_login_data")
    new_email = not email if email is not None else True
    await state.update_data(email_login_data=new_email)
    await callback.message.edit_reply_markup(reply_markup=get_email_kb(new_email))
    await callback.answer()

@router.callback_query(F.data == "settings_sorting")
async def set_sorting(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current = data.get("order_by", "price_to_up")
    await callback.message.edit_text(
        "üîÑ <b>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_sort_kb(current), parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("sort_"))
async def handle_sorting(callback: CallbackQuery, state: FSMContext):
    sorting = callback.data.split("_", 1)[1]
    await state.update_data(order_by=sorting)
    await callback.message.edit_reply_markup(reply_markup=get_sort_kb(sorting))
    await callback.answer("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!")

@router.callback_query(F.data == "settings_pve")
async def set_pve(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current = data.get("pve_access", "nomatter")
    await callback.message.edit_text(
        "üéØ <b>PVE</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ PVE:",
        reply_markup=get_pve_kb(current), parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("pve_"))
async def handle_pve(callback: CallbackQuery, state: FSMContext):
    pve = callback.data.split("_", 1)[1]
    await state.update_data(pve_access=pve)
    await callback.message.edit_reply_markup(reply_markup=get_pve_kb(pve))
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PVE –∏–∑–º–µ–Ω–µ–Ω–∞!")

@router.callback_query(F.data == "settings_sale")
async def set_sale(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    nsb = data.get("nsb")
    sb = data.get("sb")
    await callback.message.edit_text(
        "üìä <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∂–∏</b>\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:",
        reply_markup=get_sale_kb(nsb, sb), parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "toggle_nsb")
async def toggle_nsb(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    nsb = data.get("nsb")
    new_nsb = not nsb if nsb is not None else True
    await state.update_data(nsb=new_nsb)
    sb = data.get("sb")
    await callback.message.edit_reply_markup(reply_markup=get_sale_kb(new_nsb, sb))
    await callback.answer()

@router.callback_query(F.data == "toggle_sb")
async def toggle_sb(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sb = data.get("sb")
    new_sb = not sb if sb is not None else True
    await state.update_data(sb=new_sb)
    nsb = data.get("nsb")
    await callback.message.edit_reply_markup(reply_markup=get_sale_kb(nsb, new_sb))
    await callback.answer()

@router.callback_query(F.data == "settings_discounts")
async def set_discounts(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üí∏ <b>–ü–æ—Ä–æ–≥ —Å–∫–∏–¥–∫–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20):",
        parse_mode="HTML"
    )
    await state.set_state(States.discount_threshold)
    await callback.answer()

@router.message(States.discount_threshold)
async def discount_input(message: Message, state: FSMContext):
    try:
        val = int(message.text)
        if val < 0 or val > 100:
            await message.answer("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100.")
            return
        await state.update_data(max_discount_threshold=val)
        await message.answer(f"–ü–æ—Ä–æ–≥ —Å–∫–∏–¥–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val}%\n\n–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:", reply_markup=get_settings_kb())
        await state.set_state(States.settings_menu)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")

@router.callback_query(F.data == "settings_origins")
async def set_origins(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("origins", [])
    await callback.message.edit_text(
        "üì¶ <b>–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:",
        reply_markup=get_origins_kb(selected), parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("origin_"))
async def handle_origin(callback: CallbackQuery, state: FSMContext):
    origin = callback.data.split("_", 1)[1]
    data = await state.get_data()
    selected = data.get("origins", [])
    if origin in selected:
        selected.remove(origin)
    else:
        selected.append(origin)
    await state.update_data(origins=selected)
    await callback.message.edit_reply_markup(reply_markup=get_origins_kb(selected))
    await callback.answer()

@router.callback_query(F.data == "settings_level")
async def set_level(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚≠ê <b>–£—Ä–æ–≤–µ–Ω—å</b>\n\n–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        parse_mode="HTML"
    )
    await state.set_state(States.level_min)
    await callback.answer()

@router.message(States.level_min)
async def level_min_input(message: Message, state: FSMContext):
    try:
        min_level = None if message.text == "-" else int(message.text)
        await state.update_data(min_level=min_level)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (–∏–ª–∏ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        await state.set_state(States.level_max)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '-'")

@router.message(States.level_max)
async def level_max_input(message: Message, state: FSMContext):
    try:
        max_level = None if message.text == "-" else int(message.text)
        await state.update_data(max_level=max_level)
        data = await state.get_data()
        text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        if data.get("min_level"):
            text += f"–ú–∏–Ω: {data['min_level']}\n"
        if max_level:
            text += f"–ú–∞–∫—Å: {max_level}\n"
        await message.answer(text + "\n–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º:", reply_markup=get_settings_kb())
        await state.set_state(States.settings_menu)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '-'")
